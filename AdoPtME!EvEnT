local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    ScriptHub = Window:AddTab({ Title = "Script Hub", Icon = "leaf" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "money" }),
    Visuals = Window:AddTab({ Title = "UI Visual", Icon = "paintbrush" }),
    AutoBuy = Window:AddTab({ Title = "Auto Buy", Icon = "shopping-cart" })
}

-- AUTOFARM TAB
do
    local clickFunctionalityActive = false
    local updraftToggleActive = false  -- Updraft button toggle variable
    local circleTeleportationActive = false  -- Circle teleportation toggle variable
    local squareRotationActive = false  -- Square rotation toggle variable
    local teleportDelay = 1  -- Default delay seconds for teleportation
    local squareDistance = 15  -- Distance from character to the corners of the square

    -- Input for teleportation delay
    local delayInput = Tabs.AutoFarm:AddInput("TeleportDelayInput", {
        Title = "Teleport Delay (seconds)",
        Placeholder = "Enter delay in seconds",
        RemoveTextAfterFocusLost = true,
        Callback = function(inputValue)
            teleportDelay = tonumber(inputValue) or 1  -- Default to 1 if invalid input
            print("Teleport delay set to:", teleportDelay)
        end,
    })

    -- Toggle for Circle Teleportation
    local CircleToggle = Tabs.AutoFarm:AddToggle("CircleTeleportation", 
    {
        Title = "Toggle Circle Teleportation",
        Description = "Enable or disable teleportation to the Ring in BlossomShakedownJoinZone.",
        Default = false,
        Callback = function(state)
            circleTeleportationActive = state
            
            if state then
                print("Circle Teleportation Enabled")

                spawn(function() 
                    local player = game.Players.LocalPlayer

                    while circleTeleportationActive do
                        local targetRing = workspace:FindFirstChild("Interiors") 
                                           and workspace.Interiors:FindFirstChild("MainMap!Default")
                                           and workspace.Interiors["MainMap!Default"]:FindFirstChild("BlossomShakedownJoinZone")
                                           and workspace.Interiors["MainMap!Default"].BlossomShakedownJoinZone:FindFirstChild("Ring")

                        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            if targetRing then
                                player.Character.HumanoidRootPart.CFrame = targetRing.CFrame
                                print("Teleported to Ring in BlossomShakedownJoinZone.")
                            else
                                print("Ring in BlossomShakedownJoinZone not found!")
                            end
                        else
                            print("HumanoidRootPart not found!")
                        end

                        wait(teleportDelay)  -- Wait according to the specified delay
                    end
                end)
                
                print("Circle Teleportation Started")
            else
                print("Circle Teleportation Disabled")
            end
        end 
    })

    -- Toggle for Square Rotation of RingSpawns
    local SquareRotationToggle = Tabs.AutoFarm:AddToggle("SquareRotation", 
    {
        Title = "Toggle Square Rotation of RingSpawns",
        Description = "Enable to rotate the RingSpawns around the character in a square pattern.",
        Default = false,
        Callback = function(state)
            squareRotationActive = state
            
            if state then
                print("Square Rotation Enabled")

                spawn(function()
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local upperTorso = character:WaitForChild("UpperTorso")

                    while squareRotationActive do
                        local interiors = workspace:FindFirstChild("Interiors")
                        if interiors then
                            local blossomShakedownInterior = interiors:FindFirstChild("BlossomShakedownInterior")
                            if blossomShakedownInterior then
                                local ringSpawns = blossomShakedownInterior:FindFirstChild("RingSpawns")
                                if ringSpawns then
                                    local characterPosition = upperTorso.Position

                                    -- Define square corner positions
                                    local offsets = {
                                        Vector3.new(squareDistance, 0, squareDistance),  -- Top right
                                        Vector3.new(-squareDistance, 0, squareDistance),  -- Top left
                                        Vector3.new(-squareDistance, 0, -squareDistance), -- Bottom left
                                        Vector3.new(squareDistance, 0, -squareDistance)   -- Bottom right
                                    }

                                    -- Move each RingSpawn to the next position in the offsets array
                                    for i, ringSpawn in ipairs(ringSpawns:GetChildren()) do
                                        if ringSpawn:IsA("BasePart") then
                                            -- Calculate the new position based on the square pattern
                                            local newPosition = characterPosition + offsets[(i % #offsets) + 1]
                                            ringSpawn.Position = newPosition
                                            ringSpawn.Transparency = 0 -- Ensure the part is visible
                                            print("Moved RingSpawn:", ringSpawn.Name, "to position:", newPosition)
                                        end
                                    end
                                else
                                    print("RingSpawns not found in BlossomShakedownInterior!")
                                end
                            else
                                print("BlossomShakedownInterior not found!")
                            end
                        else
                            print("No items found in workspace.Interiors!")
                        end

                        wait(teleportDelay) -- Adjust the wait time for how fast you want it to rotate
                    end
                end)

                print("Square Rotation Functionality Started")
            else
                print("Square Rotation Disabled")
            end
        end 
    })

    -- Toggle for moving RingPickups and RingSpawns directly to the player
    local MoveRingItemsToggle = Tabs.AutoFarm:AddToggle("MoveRingItems", 
    {
        Title = "Toggle Move RingPickups and RingSpawns to Player",
        Description = "Enable to teleport RingPickups and RingSpawns to the player's position.",
        Default = false,
        Callback = function(state)
            clickFunctionalityActive = state
            
            if state then
                print("Moving RingPickups and RingSpawns to Player Enabled")

                spawn(function()
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local upperTorso = character:WaitForChild("UpperTorso")

                    while clickFunctionalityActive do
                        local success, err = pcall(function()  -- Error handling with pcall
                            local interiors = workspace:FindFirstChild("Interiors")
                            if not interiors or interiors:GetChildren() == 0 then
                                print("No items found in workspace.Interiors!")
                                return
                            end

                            local blossomShakedownInterior = interiors:FindFirstChild("BlossomShakedownInterior")
                            if not blossomShakedownInterior then
                                print("BlossomShakedownInterior not found!")
                                return
                            end

                            print("BlossomShakedownInterior model found.")

                            -- Handle RingPickups
                            local ringPickups = blossomShakedownInterior:FindFirstChild("RingPickups")
                            if ringPickups then
                                for _, ringPickup in ipairs(ringPickups:GetChildren()) do
                                    if ringPickup:IsA("Model") then
                                        for _, part in ipairs(ringPickup:GetChildren()) do
                                            if part:IsA("BasePart") then
                                                part.Position = upperTorso.Position + Vector3.new(0, 5, 0) -- Teleport
                                                part.Transparency = 0
                                                print("Teleported Part from RingPickups Model:", part.Name, "to player position.")
                                            end
                                        end
                                    elseif ringPickup:IsA("BasePart") then
                                        ringPickup.Position = upperTorso.Position + Vector3.new(0, 5, 0) -- Teleport
                                        ringPickup.Transparency = 0
                                        print("Teleported Part from RingPickups:", ringPickup.Name, "to player position.")
                                    end
                                end
                            else
                                print("RingPickups not found in BlossomShakedownInterior!")
                            end

                            -- Handle RingSpawns as well
                            local ringSpawns = blossomShakedownInterior:FindFirstChild("RingSpawns")
                            if ringSpawns then
                                for _, ringSpawn in ipairs(ringSpawns:GetChildren()) do
                                    if ringSpawn:IsA("Model") then
                                        for _, part in ipairs(ringSpawn:GetChildren()) do
                                            if part:IsA("BasePart") then
                                                part.Position = upperTorso.Position + Vector3.new(0, 5, 0) -- Teleport
                                                part.Transparency = 0
                                                print("Teleported Part from RingSpawns Model:", part.Name, "to player position.")
                                            end
                                        end
                                    elseif ringSpawn:IsA("BasePart") then
                                        ringSpawn.Position = upperTorso.Position + Vector3.new(0, 5, 0) -- Teleport
                                        ringSpawn.Transparency = 0
                                        print("Teleported Part from RingSpawns:", ringSpawn.Name, "to player position.")
                                    end
                                end
                            else
                                print("RingSpawns not found in BlossomShakedownInterior!")
                            end

                            -- Glider teleportation logic
                            local gliderInteractions = blossomShakedownInterior:FindFirstChild("GliderInteractions")
                            if gliderInteractions then
                                local paraglider = gliderInteractions:FindFirstChild("spring_2025_default_paraglider")
                                if paraglider then
                                    local paragliderCollision = paraglider:FindFirstChild("Collision")
                                    if paragliderCollision then
                                        -- Teleport character to the paraglider collision part
                                        character:SetPrimaryPartCFrame(paragliderCollision.CFrame)
                                        print("Teleported character to Paraglider Collision part.")
                                        wait(0.5)  -- Wait for a moment after teleporting

                                        -- After teleporting to the glider, teleport to the Interior Origin
                                        local interiorOrigin = blossomShakedownInterior:FindFirstChild("InteriorOrigin")
                                        if interiorOrigin then
                                            character:SetPrimaryPartCFrame(interiorOrigin.CFrame)
                                            print("Teleported character to Interior Origin.")
                                            wait(0.5)  -- Wait for a moment after teleporting
                                        else
                                            print("InteriorOrigin not found in BlossomShakedownInterior.")
                                        end
                                    else
                                        print("Collision part not found in the spring_2025_default_paraglider.")
                                    end
                                else
                                    print("spring_2025_default_paraglider not found in GliderInteractions.")
                                end
                            else
                                print("GliderInteractions not found in BlossomShakedownInterior.")
                            end

                        end)

                        if not success then
                            print("Error: " .. tostring(err))  -- Print any caught errors
                        end

                        wait(1) -- Adjust the wait time as needed
                    end
                end)

                print("RingItems Movement Started")
            else
                print("Moving RingPickups and RingSpawns to Player Disabled")
            end
        end 
    })

    -- Toggle for Updraft Button Activation
    local UpdraftToggle = Tabs.AutoFarm:AddToggle("UpdraftButtonActivation", 
    {
        Title = "Toggle Updraft Button Activation",
        Description = "Enable or disable the activation of the Updraft Button.",
        Default = false,
        Callback = function(state)
            updraftToggleActive = state
            
            if state then
                print("Updraft Button Activation Enabled")

                spawn(function()
                    local player = game.Players.LocalPlayer
                    local playerGui = player:WaitForChild("PlayerGui")

                    while updraftToggleActive do
                        local updraftButton = playerGui:FindFirstChild("MinigameHotbarApp")
                            and playerGui.MinigameHotbarApp:FindFirstChild("Hotbar")
                            and playerGui.MinigameHotbarApp.Hotbar:FindFirstChild("UpdraftButton")
                            and playerGui.MinigameHotbarApp.Hotbar.UpdraftButton:FindFirstChild("Button")

                        if updraftButton then
                            pcall(function()
                                for _, connection in pairs(getconnections(updraftButton.MouseButton1Down)) do
                                    connection:Fire()
                                end
                                for _, connection in pairs(getconnections(updraftButton.MouseButton1Click)) do
                                    connection:Fire()
                                end
                                for _, connection in pairs(getconnections(updraftButton.MouseButton1Up)) do
                                    connection:Fire()
                                end
                            end)
                            print("Updraft Button activated.")
                        else
                            print("Updraft Button not found in PlayerGui!")
                        end

                        wait(1) -- Check every second
                    end
                end)

                print("Updraft Button Functionality Started")
            else
                print("Updraft Button Activation Disabled")
            end
        end 
    })
end

-- Initialize SaveManager and InterfaceManager
do
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({})
    InterfaceManager:SetFolder("FluentScriptHub")
    InterfaceManager:SetFolder("FluentScriptHub/specific-game")

    InterfaceManager:BuildInterfaceSection(Tabs.Visuals)
    SaveManager:BuildConfigSection(Tabs.Visuals)
end

-- Notify the user that the script is loaded
Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been successfully loaded.",
    Duration = 8
})

-- Load the autoload config if there is one
SaveManager:LoadAutoloadConfig()
